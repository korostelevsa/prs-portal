From 1a2b3c4d5e6f7890abcdef1234567890abcdef12 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Tue, 12 Aug 2025 18:00:00 +0700
Subject: [PATCH] refactor: split app into pages/components, add banner on Main
 and fix labelFromPercentile

---
 src/App.jsx                                   |  35 +-
 src/components/Button.jsx                     |  36 ++
 src/components/Card.jsx                       |  18 +
 src/components/Chip.jsx                       |  26 +
 src/components/RiskBar.jsx                    |  24 +
 src/components/SectionTitle.jsx               |  16 +
 src/components/TopNav.jsx                     |  33 ++
 src/components/charts/DistributionChart.jsx   |  45 ++
 src/components/charts/RiskCurve.jsx           |  33 ++
 src/lib/constants.js                          |  55 +++
 src/lib/utils.js                              | 103 +++++
 src/pages/Catalog.jsx                         | 113 ++++++
 src/pages/MainPage.jsx                        | 196 ++++++++++
 src/pages/TableView.jsx                       | 407 ++++++++++++++++++++++++++
 14 files changed, 1114 insertions(+), 16 deletions(-)
 create mode 100644 src/components/Button.jsx
 create mode 100644 src/components/Card.jsx
 create mode 100644 src/components/Chip.jsx
 create mode 100644 src/components/RiskBar.jsx
 create mode 100644 src/components/SectionTitle.jsx
 create mode 100644 src/components/TopNav.jsx
 create mode 100644 src/components/charts/DistributionChart.jsx
 create mode 100644 src/components/charts/RiskCurve.jsx
 create mode 100644 src/lib/constants.js
 create mode 100644 src/lib/utils.js
 create mode 100644 src/pages/Catalog.jsx
 create mode 100644 src/pages/MainPage.jsx
 create mode 100644 src/pages/TableView.jsx

diff --git a/src/App.jsx b/src/App.jsx
index 1111111..2222222 100644
--- a/src/App.jsx
+++ b/src/App.jsx
@@ -1,35 +1,35 @@
-import React, { useMemo, useState } from "react";
-import { motion, AnimatePresence } from "framer-motion";
-import {
-  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,
-  AreaChart, Area, ResponsiveContainer, Legend,
-  BarChart, Bar, ReferenceLine
-} from "recharts";
-import {
-  Activity, ArrowLeft, Brain, ChevronRight,
-  FileDown, Flame, Heart, ListChecks, Menu,
-  PercentCircle, Search, Stethoscope, User,
-  Utensils, Info, BookOpen, FlaskConical
-} from "lucide-react";
-
-// (в исходном файле был весь код приложения — теперь мы его разбиваем по файлам)
-
-export default function App() {
-  return <div>Заглушка — старый App.jsx будет заменён при рефакторинге</div>;
-}
+import React, { useState } from "react";
+import TopNav from "./components/TopNav";
+import MainPage from "./pages/MainPage";
+import TableView from "./pages/TableView";
+import Catalog from "./pages/Catalog";
+
+export default function App() {
+  const [route, setRoute] = useState("home");
+  return (
+    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-slate-100 text-slate-900">
+      <TopNav current={route} onNav={setRoute} />
+      {route === "home" && <MainPage onGo={setRoute} />}
+      {route === "table" && <TableView />}
+      {route === "catalog" && <Catalog />}
+      <footer className="mx-auto max-w-7xl p-6 text-xs text-slate-500">
+        Демо. Числа и графики иллюстративны и не являются мед. рекомендациями.
+      </footer>
+    </div>
+  );
+}
 
diff --git a/src/components/Button.jsx b/src/components/Button.jsx
new file mode 100644
index 0000000..aaaaaaaa
--- /dev/null
+++ b/src/components/Button.jsx
@@ -0,0 +1,36 @@
+import React from "react";
+import { classNames } from "../lib/utils";
+
+export default function Button({ children, onClick, variant = "solid", icon: Icon, className = "", disabled }) {
+  return (
+    <button
+      onClick={onClick}
+      disabled={disabled}
+      className={classNames(
+        "inline-flex items-center gap-2 rounded-xl px-4 py-2 text-sm font-medium transition",
+        variant === "solid" && "bg-slate-900 text-white hover:bg-slate-800",
+        variant === "ghost" && "hover:bg-slate-100",
+        variant === "outline" && "border border-slate-200 hover:bg-slate-50",
+        disabled && "opacity-60 cursor-not-allowed",
+        className
+      )}>
+      {Icon && <Icon className="h-4 w-4" />}
+      {children}
+    </button>
+  );
+}
diff --git a/src/components/Card.jsx b/src/components/Card.jsx
new file mode 100644
index 0000000..bbbbbbbb
--- /dev/null
+++ b/src/components/Card.jsx
@@ -0,0 +1,18 @@
+import React from "react";
+import { classNames } from "../lib/utils";
+
+export default function Card({ children, className = "" }) {
+  return (
+    <div className={classNames("rounded-2xl bg-white/70 backdrop-blur shadow-md ring-1 ring-slate-100", className)}>
+      {children}
+    </div>
+  );
+}
diff --git a/src/components/Chip.jsx b/src/components/Chip.jsx
new file mode 100644
index 0000000..cccccccc
--- /dev/null
+++ b/src/components/Chip.jsx
@@ -0,0 +1,26 @@
+import React from "react";
+import { classNames } from "../lib/utils";
+
+export default function Chip({ children, tone = "slate" }) {
+  return (
+    <span
+      className={classNames(
+        "inline-flex items-center rounded-full px-3 py-1 text-xs font-medium",
+        tone === "good" && "bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200",
+        tone === "warn" && "bg-amber-50 text-amber-700 ring-1 ring-amber-200",
+        tone === "bad" && "bg-rose-50 text-rose-700 ring-1 ring-rose-200",
+        tone === "info" && "bg-sky-50 text-sky-700 ring-1 ring-sky-200",
+        tone === "slate" && "bg-slate-50 text-slate-700 ring-1 ring-slate-200"
+      )}>
+      {children}
+    </span>
+  );
+}
diff --git a/src/components/RiskBar.jsx b/src/components/RiskBar.jsx
new file mode 100644
index 0000000..dddddddd
--- /dev/null
+++ b/src/components/RiskBar.jsx
@@ -0,0 +1,24 @@
+import React from "react";
+import { toneFromPercentile } from "../lib/utils";
+
+export default function RiskBar({ percentile }) {
+  const tone = toneFromPercentile(percentile);
+  const grad = tone === "bad" ? "from-rose-500 to-rose-400" : tone === "warn" ? "from-amber-500 to-amber-400" : "from-emerald-500 to-emerald-400";
+  return (
+    <div className="w-full">
+      <div className="h-3 w-full rounded-full bg-slate-100 overflow-hidden">
+        <div className={`h-full bg-gradient-to-r ${grad}`} style={{ width: `${percentile}%` }} />
+      </div>
+      <div className="mt-1 text-xs text-slate-600">{percentile}%</div>
+    </div>
+  );
+}
diff --git a/src/components/SectionTitle.jsx b/src/components/SectionTitle.jsx
new file mode 100644
index 0000000..eeeeeeee
--- /dev/null
+++ b/src/components/SectionTitle.jsx
@@ -0,0 +1,16 @@
+import React from "react";
+
+export default function SectionTitle({ icon: Icon, title, actions }) {
+  return (
+    <div className="flex items-center justify-between gap-4">
+      <div className="flex items-center gap-2">
+        {Icon && <Icon className="h-5 w-5 text-slate-500" />}
+        <h3 className="text-sm font-semibold uppercase tracking-wide text-slate-600">{title}</h3>
+      </div>
+      <div className="flex items-center gap-2">{actions}</div>
+    </div>
+  );
+}
diff --git a/src/components/TopNav.jsx b/src/components/TopNav.jsx
new file mode 100644
index 0000000..ffffffff
--- /dev/null
+++ b/src/components/TopNav.jsx
@@ -0,0 +1,33 @@
+import React from "react";
+import Button from "./Button";
+import { Menu, Search, User } from "lucide-react";
+
+export default function TopNav({ onNav, current }) {
+  return (
+    <div className="sticky top-0 z-30 bg-white/80 backdrop-blur border-b border-slate-100">
+      <div className="mx-auto max-w-7xl px-4 py-3 flex items-center justify-between">
+        <div className="flex items-center gap-3">
+          <div className="h-9 w-9 rounded-xl bg-slate-900 text-white grid place-items-center font-semibold">PRS</div>
+          <div className="text-slate-800 font-semibold">Polygenic Risk Portal</div>
+        </div>
+        <div className="hidden md:flex items-center gap-2">
+          <Button variant={current === "home" ? "outline" : "ghost"} onClick={() => onNav("home")}>Главная</Button>
+          <Button variant={current === "table" ? "outline" : "ghost"} onClick={() => onNav("table")} icon={Menu}>Таблица</Button>
+          <Button variant={current === "catalog" ? "outline" : "ghost"} onClick={() => onNav("catalog")} icon={Search}>Категории</Button>
+        </div>
+        <div className="flex items-center gap-2">
+          <Button variant="outline" icon={User}>Иван П.</Button>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/src/components/charts/DistributionChart.jsx b/src/components/charts/DistributionChart.jsx
new file mode 100644
index 0000000..1212121
--- /dev/null
+++ b/src/components/charts/DistributionChart.jsx
@@ -0,0 +1,45 @@
+import React from "react";
+import { ResponsiveContainer, AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from "recharts";
+
+export default function DistributionChart({ percentile = 50 }) {
+  const data = new Array(101).fill(0).map((_, i) => {
+    const x = i * 2;
+    const mu = 100;
+    const sigma = 20;
+    const y = (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((x - mu) / sigma, 2));
+    return { x, y };
+  });
+  return (
+    <ResponsiveContainer width="100%" height={160}>
+      <AreaChart data={data} margin={{ top: 10, right: 10, bottom: 0, left: -20 }}>
+        <defs>
+          <linearGradient id="grad" x1="0" x2="0" y1="0" y2="1">
+            <stop offset="0%" stopColor="#93c5fd" stopOpacity={0.6} />
+            <stop offset="100%" stopColor="#93c5fd" stopOpacity={0.05} />
+          </linearGradient>
+        </defs>
+        <CartesianGrid strokeDasharray="3 3" vertical={false} />
+        <XAxis dataKey="x" tickFormatter={(v) => `${v}%`} tick={{ fontSize: 12 }} />
+        <YAxis hide domain={[0, "auto"]} />
+        <Tooltip formatter={(v) => v.toFixed(4)} labelFormatter={(l) => `Перцентиль ${l}%`} />
+        <Area type="monotone" dataKey="y" stroke="#60a5fa" fill="url(#grad)" />
+        <ReferenceLine x={percentile} stroke="#ef4444" strokeDasharray="4 4" />
+      </AreaChart>
+    </ResponsiveContainer>
+  );
+}
diff --git a/src/components/charts/RiskCurve.jsx b/src/components/charts/RiskCurve.jsx
new file mode 100644
index 0000000..1313131
--- /dev/null
+++ b/src/components/charts/RiskCurve.jsx
@@ -0,0 +1,33 @@
+import React from "react";
+import { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Line, Legend } from "recharts";
+
+export default function RiskCurve({ points, compare }) {
+  return (
+    <ResponsiveContainer width="100%" height={220}>
+      <LineChart data={points} margin={{ top: 10, right: 10, left: -20, bottom: 0 }}>
+        <CartesianGrid strokeDasharray="3 3" vertical={false} />
+        <XAxis dataKey="age" tick={{ fontSize: 12 }} />
+        <YAxis tickFormatter={(v) => `${v}%`} tick={{ fontSize: 12 }} domain={[0, 100]} />
+        <Tooltip formatter={(v) => `${v}%`} labelFormatter={(l) => `Возраст ${l}`} />
+        <Line type="monotone" dataKey="risk" strokeWidth={2} dot={false} />
+        {compare && <Line type="monotone" data={compare} dataKey="risk" strokeWidth={2} dot={false} />}
+        <Legend />
+      </LineChart>
+    </ResponsiveContainer>
+  );
}
diff --git a/src/lib/constants.js b/src/lib/constants.js
new file mode 100644
index 0000000..1414141
--- /dev/null
+++ b/src/lib/constants.js
@@ -0,0 +1,55 @@
+import { Heart, Flame, Brain } from "lucide-react";
+
+export const CONDITIONS = [
+  {
+    id: "CAD",
+    name: "Коронарная болезнь сердца (CAD)",
+    category: "Сердечно-сосудистые",
+    icon: Heart,
+    percentile: 93,
+    sex: "M",
+    age: 45,
+    orPerSd: 1.62,
+    individualOR: 2.08,
+    prsZ: 1.27,
+    tenYearRisk: 0.117,
+    lifetimeRisk: 0.318,
+    validatedAncestries: ["EUR", "EAS"],
+    model: { pgsId: "PGS00XXXX", version: "1.3.2", genome: "GRCh38" },
+    qc: { callRate: 0.988, imputed: true, snpCoverage: 0.94, ancestry: "EUR" },
+  },
+  {
+    id: "T2D",
+    name: "Сахарный диабет 2 типа (T2D)",
+    category: "Метаболические",
+    icon: Flame,
+    percentile: 81,
+    sex: "M",
+    age: 45,
+    orPerSd: 1.45,
+    individualOR: 1.52,
+    prsZ: 0.88,
+    tenYearRisk: 0.082,
+    lifetimeRisk: 0.366,
+    validatedAncestries: ["EUR", "SAS", "AMR"],
+    model: { pgsId: "PGS00YYYY", version: "2.1.0", genome: "GRCh38" },
+    qc: { callRate: 0.983, imputed: true, snpCoverage: 0.91, ancestry: "EUR" },
+  },
+  {
+    id: "CRC",
+    name: "Колоректальный рак (CRC)",
+    category: "Онкология",
+    icon: Brain,
+    percentile: 72,
+    sex: "M",
+    age: 45,
+    orPerSd: 1.30,
+    individualOR: 1.23,
+    prsZ: 0.58,
+    tenYearRisk: 0.021,
+    lifetimeRisk: 0.073,
+    validatedAncestries: ["EUR", "EAS", "AFR"],
+    model: { pgsId: "PGS00ZZZZ", version: "0.9.7", genome: "GRCh38" },
+    qc: { callRate: 0.991, imputed: false, snpCoverage: 0.97, ancestry: "EUR" },
+  },
];
+
+export const CATEGORY_COLORS = {
+  "Сердечно-сосудистые": "from-rose-500/90 to-rose-400/70",
+  Метаболические: "from-amber-500/90 to-amber-400/70",
+  Онкология: "from-indigo-500/90 to-indigo-400/70",
+};
diff --git a/src/lib/utils.js b/src/lib/utils.js
new file mode 100644
index 0000000..1515151
--- /dev/null
+++ b/src/lib/utils.js
@@ -0,0 +1,103 @@
+export function classNames(...arr) {
+  return arr.filter(Boolean).join(" ");
+}
+
+// Риски / ярлыки
+export const toneFromPercentile = (p) =>
+  p >= 85 ? "bad" : p >= 50 ? "warn" : "good";
+
+export const labelFromPercentile = (p) =>
+  p >= 85 ? "Высокий" : p >= 50 ? "Выше среднего" : "Средний/ниже";
+
+// Простейшие демо-модели риска
+export function hazardMultiplierFromPRS(z) {
+  const orPerSD = 1.6;
+  return Math.pow(orPerSD, z || 0);
+}
+export function hazardMultipliersFromLifestyle({ smoking, ldlImproved, bmiDelta, activity } = {}) {
+  let m = 1.0;
+  if (smoking) m *= 1.6;
+  if (ldlImproved) m *= 0.8;
+  if ((bmiDelta ?? 0) <= -5) m *= 0.88;
+  if (activity) m *= 0.9;
+  return m;
+}
+export function buildAbsoluteRiskCurve({ base, ageStart = 30, ageEnd = 80, prsZ = 0, lifestyle } = {}) {
+  const points = [];
+  const hzPRS = hazardMultiplierFromPRS(prsZ);
+  const hzLife = hazardMultipliersFromLifestyle(lifestyle);
+  const k = base?.k ?? 0.07;
+  const base40 = base?.base40 ?? 0.02;
+  for (let age = ageStart; age <= ageEnd; age += 1) {
+    const years = Math.max(0, age - ageStart);
+    const cumHazBaseline = base40 * ((Math.exp(k * years) - 1) / k);
+    const cumHaz = cumHazBaseline * hzPRS * hzLife;
+    const risk = 1 - Math.exp(-cumHaz);
+    points.push({ age, risk: Number((risk * 100).toFixed(2)) });
+  }
+  return points;
+}
+
+// Лёгкие рантайм-тесты (не падают UI)
+(function runSelfTests() {
+  try {
+    const pts = buildAbsoluteRiskCurve({});
+    console.assert(Array.isArray(pts) && pts.length > 0, "Risk curve points generated");
+    console.assert(pts[pts.length - 1].risk >= pts[0].risk, "Risk curve non-decreasing");
+    console.assert(labelFromPercentile(10) === "Средний/ниже", "Label low ok");
+    console.assert(labelFromPercentile(55) === "Выше среднего", "Label mid ok");
+    console.assert(labelFromPercentile(90) === "Высокий", "Label high ok");
+  } catch (e) { /* no-op */ }
+})();
diff --git a/src/pages/Catalog.jsx b/src/pages/Catalog.jsx
new file mode 100644
index 0000000..1616161
--- /dev/null
+++ b/src/pages/Catalog.jsx
@@ -0,0 +1,113 @@
+import React, { useMemo, useState } from "react";
+import Card from "../components/Card";
+import Button from "../components/Button";
+import Chip from "../components/Chip";
+import TableView from "./TableView";
+import { CONDITIONS, CATEGORY_COLORS } from "../lib/constants";
+import { ArrowLeft, Menu } from "lucide-react";
+
+export default function Catalog() {
+  const [selected, setSelected] = useState(null);
+  const groups = useMemo(() => {
+    const map = {};
+    for (const c of CONDITIONS) {
+      (map[c.category] = map[c.category] || []).push(c);
+    }
+    return map;
+  }, []);
+
+  const statsFor = (arr) => {
+    const n = arr.length;
+    const avg = Math.round(arr.reduce((s, x) => s + x.percentile, 0) / n);
+    const high = arr.filter((x) => x.percentile >= 85).length;
+    const ancestries = Array.from(new Set(arr.flatMap((x) => x.validatedAncestries)))
+      .slice(0, 5)
+      .join(", ");
+    return { n, avg, high, ancestries };
+  };
+
+  if (selected) {
+    const items = groups[selected] || [];
+    const s = statsFor(items);
+    return (
+      <div className="mx-auto max-w-7xl p-4 space-y-4">
+        <div className="flex items-center justify-between">
+          <div>
+            <div className="text-xs text-slate-500">Категория</div>
+            <div className="text-xl font-semibold">{selected}</div>
+            <div className="text-sm text-slate-600 mt-1">
+              Состояний: {s.n} · Ср. перцентиль: {s.avg}% · Высокий риск (≥85%): {s.high}
+            </div>
+          </div>
+          <Button variant="outline" icon={ArrowLeft} onClick={() => setSelected(null)}>
+            Назад к категориям
+          </Button>
+        </div>
+        <TableView items={items} />
+      </div>
+    );
+  }
+
+  const entries = Object.entries(groups);
+  return (
+    <div className="mx-auto max-w-7xl p-4 space-y-4">
+      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+        {entries.map(([cat, arr]) => {
+          const s = (function(arr){
+            const n = arr.length;
+            const avg = Math.round(arr.reduce((sum, x) => sum + x.percentile, 0) / n);
+            const high = arr.filter(x => x.percentile >= 85).length;
+            const ancestries = Array.from(new Set(arr.flatMap(x => x.validatedAncestries))).slice(0,5).join(", ");
+            return { n, avg, high, ancestries };
+          })(arr);
+
+          return (
+            <Card key={cat} className="p-5">
+              <div className="flex items-start justify-between">
+                <div>
+                  <div className="text-xs text-slate-500">Категория</div>
+                  <div className="text-lg font-semibold">{cat}</div>
+                  <div className="mt-2 flex flex-wrap gap-2">
+                    <Chip tone="info">Состояний: {s.n}</Chip>
+                    <Chip>Ср. перцентиль: {s.avg}%</Chip>
+                    <Chip tone={s.high > 0 ? "warn" : "good"}>Высокий риск: {s.high}</Chip>
+                  </div>
+                  <div className="mt-2 text-xs text-slate-500">Валидации: {s.ancestries || "—"}</div>
+                </div>
+                <div className={`h-12 w-12 rounded-xl text-white grid place-items-center bg-gradient-to-br ${CATEGORY_COLORS[cat] || "from-slate-500 to-slate-400"}`}>
+                  <Menu className="h-6 w-6" />
+                </div>
+              </div>
+              <div className="mt-4 flex justify-end">
+                <Button onClick={() => setSelected(cat)}>Открыть</Button>
+              </div>
+            </Card>
+          );
+        })}
+      </div>
+    </div>
+  );
+}
diff --git a/src/pages/MainPage.jsx b/src/pages/MainPage.jsx
new file mode 100644
index 0000000..1717171
--- /dev/null
+++ b/src/pages/MainPage.jsx
@@ -0,0 +1,196 @@
+import React from "react";
+import Card from "../components/Card";
+import Button from "../components/Button";
+import Chip from "../components/Chip";
+import SectionTitle from "../components/SectionTitle";
+import DistributionChart from "../components/charts/DistributionChart";
+import { Activity, Stethoscope, BookOpen, PercentCircle, Info, Search, Menu, FlaskConical, Heart } from "lucide-react";
+
+export default function MainPage({ onGo }) {
+  const steps = [
+    { t: "Сырьё", d: "WGS/генотипирование → VCF/PLINK" },
+    { t: "QC", d: "Фильтры по call rate, MAF, палиндромы, выравнивание аллелей" },
+    { t: "Счёт PRS", d: "Σ (генотип × вес из GWAS/PGS)" },
+    { t: "Нормализация", d: "Перцентиль/SD внутри эталонной когорты" },
+    { t: "Интерпретация", d: "Относительный и абсолютный риск, с учётом факторов" },
+  ];
+  const faq = [
+    { q: "PRS = диагноз?", a: "Нет. Это статистическая оценка предрасположенности и относительного риска." },
+    { q: "Почему у нас с братом разные PRS?", a: "Из‑за рекомбинации и независимого наследования полигенных вариантов." },
+    { q: "Можно ли снизить риск?", a: "Да. Образ жизни и контроль факторов (АД, ЛПНП, масса тела, активность) меняют абсолютный риск." },
+    { q: "Важна ли ancestry?", a: "Да. Модели чаще обучены на EUR; переносимость на другие группы ограничена и требует калибровки." },
+  ];
+
+  return (
+    <div className="mx-auto max-w-7xl p-4 space-y-6">
+      {/* Баннер */}
+      <div className="rounded-2xl bg-gradient-to-r from-emerald-500 to-emerald-400 text-white p-6 shadow-md flex items-center justify-between">
+        <div>
+          <h2 className="text-2xl font-bold">Новая версия PRS портала</h2>
+          <p className="mt-1 text-sm">Теперь с расширенной статистикой и улучшенной визуализацией</p>
+        </div>
+        <img
+          src="https://cdn-icons-png.flaticon.com/512/3135/3135715.png"
+          alt="Banner Icon"
+          className="h-16 w-16"
+        />
+      </div>
+
+      <Card className="p-8 bg-gradient-to-br from-slate-50 to-white">
+        <div className="text-xs text-slate-500">Посадочная страница</div>
+        <div className="mt-1 text-3xl font-semibold">Polygenic Risk Scores (PRS)</div>
+        {/* В JSX комментарии пишутся так */}
+        <div className="mt-2 text-slate-600 max-w-3xl">
+          Полигенные рисковые баллы объединяют множество генетических вариантов (SNP) в одну метрику
+          предрасположенности. Здесь вы найдёте объяснение, как считается PRS, как читать отчёт и где он полезен.
+        </div>
+        <div className="mt-4 flex flex-wrap gap-2">
+          <Button onClick={() => onGo?.("table")} icon={Menu}>Открыть таблицу состояний</Button>
+          <Button variant="outline" onClick={() => onGo?.("catalog")} icon={Search}>Перейти к категориям</Button>
+        </div>
+      </Card>
+
+      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+        <Card className="p-5">
+          <SectionTitle title="Что такое PRS" icon={Info} />
+          <div className="mt-3 text-sm text-slate-700">
+            PRS — взвешенная сумма эффектов SNP (весов β или log(OR)), полученных из GWAS. Значение сравнивается с
+            референсной когортой и переводится в перцентиль.
+          </div>
+        </Card>
+        <Card className="p-5">
+          <SectionTitle title="Как считается" icon={FlaskConical} />
+          <ul className="mt-3 list-disc list-inside text-sm text-slate-700">
+            <li>Веса берутся из валидированных полигенных моделей (PGS Catalog/литература).</li>
+            <li>Учитываются LD и метод построения (PRS‑CS/LDpred/CT и др.).</li>
+            <li>Контроль QC и согласования аллелей обязателен.</li>
+          </ul>
+        </Card>
+        <Card className="p-5">
+          <SectionTitle title="Как читать результат" icon={BookOpen} />
+          <ul className="mt-3 list-disc list-inside text-sm text-slate-700">
+            <li>Перцентиль и категория риска (низкий/средний/высокий).</li>
+            <li>Относительный риск (например, OR по сравнению со средним).</li>
+            <li>Абсолютный риск зависит от возраста, пола и факторов образа жизни.</li>
+          </ul>
+        </Card>
+      </div>
+
+      <Card className="p-5">
+        <SectionTitle title="Распределение PRS в популяции" icon={PercentCircle} />
+        <div className="mt-2 text-sm text-slate-700">
+          Ваше положение на кривой показано красной линией. Большинство людей — около середины; «хвосты» соответствуют
+          заметно выше/ниже среднего риску.
+        </div>
+        <div className="mt-3"><DistributionChart percentile={75} /></div>
+        <div className="mt-2 flex flex-wrap gap-2 text-xs text-slate-500">
+          <Chip tone="good">Средний/ниже</Chip>
+          <Chip tone="warn">Выше среднего</Chip>
+          <Chip tone="bad">Высокий</Chip>
+        </div>
+      </Card>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+        <Card className="p-5">
+          <SectionTitle title="Относительный риск" icon={Activity} />
+          <div className="mt-3 text-sm text-slate-700">
+            Показывает, во сколько раз ваша вероятность исхода отличается от среднего уровня в популяции. Зависит от перцентиля PRS.
+          </div>
+        </Card>
+        <Card className="p-5">
+          <SectionTitle title="Абсолютный риск" icon={Stethoscope} />
+          <div className="mt-3 text-sm text-slate-700">
+            Вероятность события за период (например, 10 лет) с учётом возраста, пола и модифицируемых факторов (курение, ЛПНП, ИМТ, активность).
+          </div>
+        </Card>
+      </div>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+        <Card className="p-5">
+          <SectionTitle title="Где PRS полезен" icon={Heart} />
+          <ul className="mt-3 list-disc list-inside text-sm text-slate-700">
+            <li>Стратификация профилактики (например, CAD, T2D, CRC).</li>
+            <li>Ранжирование интенсивности наблюдения и скрининга.</li>
+            <li>Комбинация с клиническими шкалами для персонализации.</li>
+          </ul>
+        </Card>
+        <Card className="p-5">
+          <SectionTitle title="Ограничения" icon={Info} />
+          <ul className="mt-3 list-disc list-inside text-sm text-slate-700">
+            <li>Не диагностирует заболевание.</li>
+            <li>Переносимость между этничностями может снижаться.</li>
+            <li>Требуется корректная калибровка абсолютного риска.</li>
+          </ul>
+        </Card>
+      </div>
+
+      <Card className="p-5">
+        <SectionTitle title="Конвейер анализа данных" icon={FlaskConical} />
+        <div className="mt-3 grid grid-cols-1 md:grid-cols-5 gap-3 text-sm">
+          {steps.map((s, i) => (
+            <div key={i} className="rounded-xl p-3 ring-1 ring-slate-200 bg-white/60">
+              <div className="text-xs text-slate-500">Шаг {i + 1}</div>
+              <div className="font-medium">{s.t}</div>
+              <div className="text-slate-600 mt-1">{s.d}</div>
+            </div>
+          ))}
+        </div>
+      </Card>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+        <Card className="p-5">
+          <SectionTitle title="Частые вопросы" icon={BookOpen} />
+          <div className="mt-3 space-y-3">
+            {faq.map((f, i) => (
+              <div key={i} className="text-sm">
+                <div className="font-medium">{f.q}</div>
+                <div className="text-slate-700">{f.a}</div>
+              </div>
+            ))}
+          </div>
+        </Card>
+        <Card className="p-5">
+          <SectionTitle title="Ссылки и источники" icon={BookOpen} />
+          <ul className="mt-3 list-disc list-inside text-sm text-slate-700">
+            <li>PGS Catalog — реестр полигенных моделей.</li>
+            <li>GWAS Catalog — ассоциации SNP‑фенотип.</li>
+            <li>UK Biobank — эталонная ресурсная когорта.</li>
+          </ul>
+          <div className="mt-3 text-xs text-slate-500">
+            Материал носит образовательный характер и не заменяет консультацию врача.
+          </div>
+        </Card>
+      </div>
+    </div>
+  );
+}
diff --git a/src/pages/TableView.jsx b/src/pages/TableView.jsx
new file mode 100644
index 0000000..1818181
--- /dev/null
+++ b/src/pages/TableView.jsx
@@ -0,0 +1,407 @@
+import React, { useMemo, useState } from "react";
+import Card from "../components/Card";
+import Button from "../components/Button";
+import Chip from "../components/Chip";
+import SectionTitle from "../components/SectionTitle";
+import RiskCurve from "../components/charts/RiskCurve";
+import RiskBar from "../components/RiskBar";
+import { CONDITIONS, CATEGORY_COLORS } from "../lib/constants";
+import { classNames, toneFromPercentile, labelFromPercentile, buildAbsoluteRiskCurve } from "../lib/utils";
+import { motion, AnimatePresence } from "framer-motion";
+import { Utensils, Activity, ChevronRight, ListChecks, FileDown, PercentCircle, Stethoscope, Info, BookOpen, FlaskConical } from "lucide-react";
+import { ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip, BarChart, Bar } from "recharts";
+
+function ActionsChecklist({ onExport }) {
+  const [items, setItems] = useState([
+    { id: 1, text: "Измерить АД в покое (3 дня)", done: false },
+    { id: 2, text: "Сдать липидный профиль и HbA1c", done: false },
+    { id: 3, text: "Ходьба ≥30 мин/день (5–6 дней/нед)", done: true },
+    { id: 4, text: "Записаться к врачу для обсуждения плана", done: false },
+  ]);
+  const toggle = (id) => setItems(prev => prev.map(it => it.id===id? { ...it, done: !it.done } : it));
+  return (
+    <div className="space-y-4">
+      <div className="flex items-center justify-between">
+        <div className="text-sm text-slate-600">Отмечайте выполненные пункты — прогресс сохранится.</div>
+        <Button variant="outline" icon={FileDown} onClick={onExport}>Экспорт PDF</Button>
+      </div>
+      <div className="space-y-2">
+        {items.map(it => (
+          <label key={it.id} className={classNames("flex items-center gap-3 rounded-xl p-3 ring-1 ring-slate-200", it.done ? "bg-emerald-50" : "bg-white")}>
+            <input type="checkbox" checked={it.done} onChange={()=>toggle(it.id)} className="h-5 w-5 rounded"/>
+            <span className={classNames("text-sm", it.done && "line-through text-slate-500")}>{it.text}</span>
+          </label>
+        ))}
+      </div>
+      <div className="text-xs text-slate-500">Информация носит образовательный характер и не заменяет консультацию врача.</div>
+    </div>
+  );
+}
+
+function DietPlan() {
+  const swaps = [
+    { from: "Майонез", to: "Натуральный йогурт" },
+    { from: "Колбасы", to: "Бобовые/птица" },
+    { from: "Белый рис", to: "Бурый/дикий рис" },
+    { from: "Сладкая выпечка", to: "Орехи/фрукты" },
+  ];
+  const week = [
+    { day: "Пн", focus: "Овощи ≥400 г/сут" },
+    { day: "Вт", focus: "Рыба 2×/нед" },
+    { day: "Ср", focus: "Натрий <2 г/сут" },
+    { day: "Чт", focus: "Зерновые цельные" },
+    { day: "Пт", focus: "Ходьба 30–45 мин" },
+    { day: "Сб", focus: "Орехи/бобовые" },
+    { day: "Вс", focus: "Сон 7–8 ч" },
+  ];
+  return (
+    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+      <Card className="p-4">
+        <SectionTitle icon={Utensils} title="Быстрые замены (свайпы)" />
+        <ul className="mt-3 space-y-2 text-sm">
+          {swaps.map((s, i) => (
+            <li key={i} className="flex items-center justify-between rounded-xl p-2 ring-1 ring-slate-200">
+              <span>{s.from}</span>
+              <ChevronRight className="h-4 w-4 text-slate-400"/>
+              <span className="font-medium">{s.to}</span>
+            </li>
+          ))}
+        </ul>
+      </Card>
+      <Card className="p-4">
+        <SectionTitle icon={Activity} title="Фокус недели (4-недельный цикл)" />
+        <div className="mt-3 grid grid-cols-7 gap-2 text-sm">
+          {week.map((w, i) => (
+            <div key={i} className="rounded-xl p-3 ring-1 ring-slate-200 bg-white/60">
+              <div className="text-xs text-slate-500">{w.day}</div>
+              <div className="font-medium">{w.focus}</div>
+            </div>
+          ))}
+        </div>
+      </Card>
+    </div>
+  );
+}
+
+function DiseaseInfoPanel({ condition }) {
+  const map = {
+    CAD: {
+      title: "О коронарной болезни сердца",
+      summary: "CAD — поражение коронарных артерий, повышающее риск инфаркта. PRS отражает суммарный эффект многих вариантов ДНК, но не является диагнозом.",
+      bullets: [
+        "Факторы: возраст, пол, семейный анамнез, курение, АГ, дислипидемия, диабет, ожирение, низкая активность.",
+        "Симптомы: загрудинная боль при нагрузке, одышка, непереносимость нагрузок.",
+        "Скрининг: контроль АД, липидов, глюкозы/HbA1c; оценка 10-летнего клинического риска.",
+      ],
+    },
+    T2D: {
+      title: "О сахарном диабете 2 типа",
+      summary: "T2D — метаболическое заболевание с инсулинорезистентностью. PRS оценивает генетическую предрасположенность.",
+      bullets: [
+        "Факторы: ИМТ, висцеральное ожирение, малоподвижность, семейный анамнез, гестационный диабет, возраст.",
+        "Скрининг: глюкоза натощак, HbA1c, при факторах риска — чаще.",
+        "Профилактика: снижение веса 5–10%, активность ≥150 мин/нед, рацион с высоким содержанием клетчатки.",
+      ],
+    },
+    CRC: {
+      title: "О колоректальном раке",
+      summary: "CRC — злокачественная опухоль толстой/прямой кишки. PRS отражает фоновые генетические факторы популяционного риска.",
+      bullets: [
+        "Факторы: возраст, семейный анамнез, красное/переработанное мясо, мало клетчатки, ожирение, алкоголь, курение.",
+        "Скрининг: колоноскопия/ФИТ по возрасту и риску.",
+        "Симптомы: кровь в стуле, изменение стула, анемия, потеря веса — повод к обследованию.",
+      ],
+    },
+  };
+  const info = map[condition.id] || { title: "О заболевании", summary: "", bullets: [] };
+  return (
+    <Card className="p-4">
+      <SectionTitle icon={Info} title={info.title} />
+      <p className="mt-2 text-sm text-slate-700">{info.summary}</p>
+      <ul className="mt-3 text-sm text-slate-700 list-disc list-inside">{info.bullets.map((b, i) => <li key={i}>{b}</li>)}</ul>
+      <div className="mt-2 text-xs text-slate-500">Образовательный материал. Не заменяет консультацию врача.</div>
+    </Card>
+  );
+}
+
+function StatsPanel({ condition }) {
+  const snpTotal = condition.id === 'CAD' ? 313000 : condition.id === 'T2D' ? 150000 : 180000;
+  const snpCovered = Math.round(snpTotal * condition.qc.snpCoverage);
+  const snpMissing = snpTotal - snpCovered;
+  const gwas = {
+    studies: condition.id === 'CAD' ? 12 : condition.id === 'T2D' ? 10 : 8,
+    trainN: condition.id === 'CAD' ? 520000 : condition.id === 'T2D' ? 680000 : 430000,
+    auc: condition.id === 'CAD' ? 0.63 : condition.id === 'T2D' ? 0.61 : 0.58,
+  };
+  const coverageData = [ { name: 'Покрыты', value: snpCovered }, { name: 'Пропуски', value: snpMissing } ];
+  const topVariants = Array.from({ length: 8 }).map((_, i) => {
+    const rs = 100000 + i * 7 + (condition.id === 'CAD' ? 0 : condition.id === 'T2D' ? 1 : 2);
+    const alleles = ['A', 'T', 'G', 'C']; const ea = alleles[(i + 1) % 4];
+    const beta = Number((0.02 + i * 0.005).toFixed(3)); const maf = Number((0.42 - i * 0.03).toFixed(2));
+    const contrib = Number(((9 - i) * 3.7).toFixed(1)); return { rsid: `rs${rs}`, ea, beta, maf, contrib };
+  });
+  const exportCSV = () => {
+    try {
+      const header = 'rsid,EA,beta,MAF,contrib(%)\\n';
+      const rows = topVariants.map(v => `${v.rsid},${v.ea},${v.beta},${v.maf},${v.contrib}`).join('\\n');
+      const blob = new Blob([header + rows], { type: 'text/csv;charset=utf-8;' });
+      const url = URL.createObjectURL(blob); const a = document.createElement('a');
+      a.href = url; a.download = `${condition.id}_top_variants_demo.csv`; a.click(); URL.revokeObjectURL(url);
+    } catch (e) { alert('Экспорт недоступен в демо-среде'); }
+  };
+  return (
+    <div className="space-y-4">
+      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+        <Card className="p-4">
+          <SectionTitle title="Сводка GWAS/PGS (демо)" icon={PercentCircle} />
+          <ul className="mt-2 text-sm text-slate-700 list-disc list-inside">
+            <li>PGS: {condition.model.pgsId} · v{condition.model.version} · {condition.model.genome}</li>
+            <li>OR per SD: {condition.orPerSd?.toFixed ? condition.orPerSd.toFixed(2) : condition.orPerSd}</li>
+            <li>GWAS исследований: {gwas.studies} · Обучающая выборка ≈ {gwas.trainN.toLocaleString()}</li>
+            <li>Дискриминация (AUC, демо): {Math.round(gwas.auc * 1000) / 1000}</li>
+            <li>Размер модели: ≈ {snpTotal.toLocaleString()} SNP · покрыто: {snpCovered.toLocaleString()} ({Math.round(condition.qc.snpCoverage * 100)}%)</li>
+            <li>Валидации по ancestry: {condition.validatedAncestries.join(', ')}</li>
+          </ul>
+        </Card>
+        <Card className="p-4 md:col-span-2">
+          <SectionTitle title="Покрытие модели (демо)" icon={PercentCircle} />
+          <div className="mt-3">
+            <ResponsiveContainer width="100%" height={180}>
+              <BarChart data={coverageData} margin={{ top: 10, right: 10, left: -20, bottom: 0 }}>
+                <CartesianGrid strokeDasharray="3 3" vertical={false} />
+                <XAxis dataKey="name" tick={{ fontSize: 12 }} />
+                <YAxis tick={{ fontSize: 12 }} />
+                <Tooltip />
+                <Bar dataKey="value" strokeWidth={1} />
+              </BarChart>
+            </ResponsiveContainer>
+          </div>
+          <div className="mt-2 text-xs text-slate-500">Демо-покрытие по оценке параметров, не для клинического использования.</div>
+        </Card>
+      </div>
+      <Card className="p-4">
+        <SectionTitle title="Топ-варианты по вкладу в PRS (демо)" icon={ListChecks} actions={<Button variant="outline" icon={FileDown} onClick={exportCSV}>Экспорт CSV</Button>} />
+        <div className="mt-3 overflow-auto">
+          <table className="w-full text-sm">
+            <thead>
+              <tr className="text-xs uppercase text-slate-500">
+                <th className="text-left py-2 pr-2">rsID</th>
+                <th className="text-left py-2 pr-2">Эфф. аллель</th>
+                <th className="text-left py-2 pr-2">Вес (β)</th>
+                <th className="text-left py-2 pr-2">MAF</th>
+                <th className="text-left py-2 pr-2">Вклад, %</th>
+              </tr>
+            </thead>
+            <tbody>
+              {topVariants.map(v => (
+                <tr key={v.rsid} className="border-t border-slate-100">
+                  <td className="py-2 pr-2 font-mono">{v.rsid}</td>
+                  <td className="py-2 pr-2">{v.ea}</td>
+                  <td className="py-2 pr-2">{v.beta}</td>
+                  <td className="py-2 pr-2">{v.maf}</td>
+                  <td className="py-2 pr-2">{v.contrib}</td>
+                </tr>
+              ))}
+            </tbody>
+          </table>
+        </div>
+      </Card>
+    </div>
+  );
+}
+
+function InlineDetail({ condition }) {
+  const [tab, setTab] = useState("actions");
+  const [lifestyle, setLifestyle] = useState({ smoking: true, ldlImproved: false, bmiDelta: 0, activity: false });
+  const base = { base40: 0.02, k: 0.07 };
+  const points = useMemo(() => buildAbsoluteRiskCurve({ base, prsZ: condition.prsZ, lifestyle }), [condition, lifestyle]);
+  const improved = useMemo(
+    () => buildAbsoluteRiskCurve({ base, prsZ: condition.prsZ, lifestyle: { ...lifestyle, smoking: false, ldlImproved: true, activity: true, bmiDelta: -5 } }),
+    [condition, lifestyle]
+  );
+
+  return (
+    <div className="space-y-4">
+      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+        <Card className="p-5">
+          <div className="text-xs text-slate-500">Категория риска</div>
+          <div className="mt-1 text-2xl font-bold">{labelFromPercentile(condition.percentile)}</div>
+          <div className="mt-2 text-sm text-slate-600">Перцентиль {condition.percentile} · OR/инд: {condition.individualOR.toFixed(2)}</div>
+          <div className="mt-4 grid grid-cols-2 gap-3">
+            <Card className="p-3 text-center">
+              <div className="text-xs text-slate-500">10-летний риск</div>
+              <div className="text-xl font-bold">{(condition.tenYearRisk * 100).toFixed(1)}%</div>
+            </Card>
+            <Card className="p-3 text-center">
+              <div className="text-xs text-slate-500">Пожизненный риск</div>
+              <div className="text-xl font-bold">{(condition.lifetimeRisk * 100).toFixed(1)}%</div>
+            </Card>
+          </div>
+        </Card>
+
+        <Card className="p-5 md:col-span-2">
+          <SectionTitle title="Абсолютный риск по возрасту (демо)" />
+          <div className="mt-3"><RiskCurve points={points} compare={improved} /></div>
+          <div className="mt-2 flex flex-wrap gap-2 text-xs text-slate-500">
+            <Chip tone="bad">Текущий сценарий</Chip>
+            <Chip tone="good">С улучшениями (без курения, ЛПНП −30%, активность, −5 BMI)</Chip>
+          </div>
+        </Card>
+      </div>
+
+      <Card className="p-2">
+        <div className="flex items-center gap-2 p-2">
+          <button onClick={() => setTab("actions")} className={`px-4 py-2 rounded-xl text-sm ${tab === "actions" ? "bg-slate-900 text-white" : "hover:bg-slate-100"}`}>Действия</button>
+          <button onClick={() => setTab("diet")} className={`px-4 py-2 rounded-xl text-sm ${tab === "diet" ? "bg-slate-900 text-white" : "hover:bg-slate-100"}`}>Питание</button>
+          <button onClick={() => setTab("stats")} className={`px-4 py-2 rounded-xl text-sm ${tab === "stats" ? "bg-slate-900 text-white" : "hover:bg-slate-100"}`}>Статистика</button>
+          <button onClick={() => setTab("info")} className={`px-4 py-2 rounded-xl text-sm ${tab === "info" ? "bg-slate-900 text-white" : "hover:bg-slate-100"}`}>О заболевании</button>
+          <button onClick={() => setTab("study")} className={`px-4 py-2 rounded-xl text-sm ${tab === "study" ? "bg-slate-900 text-white" : "hover:bg-slate-100"}`}>Об исследовании</button>
+        </div>
+        <div className="p-4">
+          <AnimatePresence mode="wait">
+            {tab === "actions" && (
+              <motion.div key="ac" initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}>
+                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+                  <Card className="p-4 md:col-span-1">
+                    <SectionTitle title="Факторы риска (что-если)" />
+                    <div className="mt-2 space-y-3 text-sm">
+                      <label className="flex items-center gap-3"><input type="checkbox" checked={lifestyle.smoking} onChange={() => setLifestyle(v => ({ ...v, smoking: !v.smoking }))} /> Курение</label>
+                      <label className="flex items-center gap-3"><input type="checkbox" checked={lifestyle.ldlImproved} onChange={() => setLifestyle(v => ({ ...v, ldlImproved: !v.ldlImproved }))} /> ЛПНП улучшен (−30%)</label>
+                      <label className="flex items-center gap-3"><input type="checkbox" checked={lifestyle.activity} onChange={() => setLifestyle(v => ({ ...v, activity: !v.activity }))} /> Активность ≥150 мин/нед</label>
+                      <div className="flex items-center gap-3"><span>ΔBMI</span>
+                        <input type="range" min={-10} max={10} value={lifestyle.bmiDelta} onChange={(e) => setLifestyle(v => ({ ...v, bmiDelta: Number(e.target.value) }))} className="w-full" />
+                        <span className="tabular-nums">{lifestyle.bmiDelta}</span>
+                      </div>
+                    </div>
+                  </Card>
+                  <Card className="p-4 md:col-span-2"><ActionsChecklist onExport={() => alert("Экспорт демонстрационный")} /></Card>
+                </div>
+              </motion.div>
+            )}
+            {tab === "diet" && (<motion.div key="di" initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}><DietPlan /></motion.div>)}
+            {tab === "stats" && (<motion.div key="st" initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}><StatsPanel condition={condition} /></motion.div>)}
+            {tab === "info" && (<motion.div key="inf" initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}><DiseaseInfoPanel condition={condition} /></motion.div>)}
+            {tab === "study" && (<motion.div key="stud" initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}><div className="text-sm text-slate-600">Паспорт модели см. в статистике (демо).</div></motion.div>)}
+          </AnimatePresence>
+        </div>
+      </Card>
+    </div>
+  );
+}
+
+export default function TableView({ items = CONDITIONS }) {
+  const [openId, setOpenId] = useState(null);
+  return (
+    <div className="mx-auto max-w-7xl p-4 space-y-3">
+      <Card className="p-3">
+        <div className="grid grid-cols-12 text-xs uppercase tracking-wide text-slate-500">
+          <div className="col-span-6 pl-3">Состояние</div>
+          <div className="col-span-6">Шкала риска (перцентиль)</div>
+        </div>
+      </Card>
+      {items.map((c) => (
+        <Card key={c.id} className="overflow-hidden">
+          <button onClick={() => setOpenId(openId === c.id ? null : c.id)} className="w-full grid grid-cols-12 items-center p-4 hover:bg-slate-50 text-left">
+            <div className="col-span-6 flex items-center gap-3">
+              <div className={`h-10 w-10 rounded-xl text-white grid place-items-center bg-gradient-to-br ${CATEGORY_COLORS[c.category]}`}>
+                {(() => { const IconComp = c?.icon; const SafeIcon = typeof IconComp === 'function' ? IconComp : null; return SafeIcon ? <SafeIcon className="h-5 w-5" /> : <span className="text-xs">PRS</span>; })()}
+              </div>
+              <div>
+                <div className="font-medium text-slate-900">{c.name}</div>
+                <div className="text-xs text-slate-500">{c.category} · PGS {c.model.pgsId} · v{c.model.version}</div>
+              </div>
+            </div>
+            <div className="col-span-6 flex items-center gap-3">
+              <div className="flex-1 min-w-[160px]"><RiskBar percentile={c.percentile} /></div>
+              <Chip tone={toneFromPercentile(c.percentile)}>{labelFromPercentile(c.percentile)}</Chip>
+              <span className={`h-5 w-5 text-slate-400 transition-transform ${openId === c.id ? "rotate-180" : ""}`}>▾</span>
+            </div>
+          </button>
+          <AnimatePresence initial={false}>
+            {openId === c.id && (
+              <motion.div initial={{ height: 0, opacity: 0 }} animate={{ height: "auto", opacity: 1 }} exit={{ height: 0, opacity: 0 }} className="border-t border-slate-100 p-4 bg-white/60">
+                <InlineDetail condition={c} />
+              </motion.div>
+            )}
+          </AnimatePresence>
+        </Card>
+      ))}
+    </div>
+  );
+}
-- 
2.45.0
